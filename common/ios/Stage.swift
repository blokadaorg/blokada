// Autogenerated from Pigeon (v12.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

enum StageModal: Int {
  case help = 0
  case perms = 1
  case onboardingFamily = 2
  case onboardingAccountDecided = 3
  case payment = 4
  case plusLocationSelect = 5
  case debug = 6
  case debugSharing = 7
  case adsCounterShare = 8
  case custom = 9
  case fault = 10
  case faultLocked = 11
  case faultLockInvalid = 12
  case faultLinkAlready = 13
  case accountChange = 14
  case accountLink = 15
  case accountInitFailed = 16
  case accountRestoreFailed = 17
  case accountRestoreIdOk = 18
  case accountRestoreIdFailed = 19
  case accountExpired = 20
  case accountInvalid = 21
  case plusTooManyLeases = 22
  case plusVpnFailure = 23
  case paymentUnavailable = 24
  case paymentTempUnavailable = 25
  case paymentFailed = 26
  case deviceAlias = 27
  case lock = 28
  case rate = 29
  case crash = 30
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol StageOps {
  func doShowModal(modal: StageModal, completion: @escaping (Result<Void, Error>) -> Void)
  func doDismissModal(completion: @escaping (Result<Void, Error>) -> Void)
  func doOpenLink(url: String, completion: @escaping (Result<Void, Error>) -> Void)
  func doHomeReached(completion: @escaping (Result<Void, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class StageOpsSetup {
  /// The codec used by StageOps.
  /// Sets up an instance of `StageOps` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: StageOps?) {
    let doShowModalChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.common.StageOps.doShowModal", binaryMessenger: binaryMessenger)
    if let api = api {
      doShowModalChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let modalArg = StageModal(rawValue: args[0] as! Int)!
        api.doShowModal(modal: modalArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      doShowModalChannel.setMessageHandler(nil)
    }
    let doDismissModalChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.common.StageOps.doDismissModal", binaryMessenger: binaryMessenger)
    if let api = api {
      doDismissModalChannel.setMessageHandler { _, reply in
        api.doDismissModal() { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      doDismissModalChannel.setMessageHandler(nil)
    }
    let doOpenLinkChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.common.StageOps.doOpenLink", binaryMessenger: binaryMessenger)
    if let api = api {
      doOpenLinkChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let urlArg = args[0] as! String
        api.doOpenLink(url: urlArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      doOpenLinkChannel.setMessageHandler(nil)
    }
    let doHomeReachedChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.common.StageOps.doHomeReached", binaryMessenger: binaryMessenger)
    if let api = api {
      doHomeReachedChannel.setMessageHandler { _, reply in
        api.doHomeReached() { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      doHomeReachedChannel.setMessageHandler(nil)
    }
  }
}
