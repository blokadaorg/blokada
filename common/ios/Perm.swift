// Autogenerated from Pigeon (v12.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol PermOps {
  func getPrivateDnsSetting(completion: @escaping (Result<String, Error>) -> Void)
  func doSetPrivateDnsEnabled(tag: String, alias: String, completion: @escaping (Result<Void, Error>) -> Void)
  func doSetDns(tag: String, completion: @escaping (Result<Void, Error>) -> Void)
  func doNotificationEnabled(completion: @escaping (Result<Bool, Error>) -> Void)
  func doVpnEnabled(completion: @escaping (Result<Bool, Error>) -> Void)
  func doOpenSettings(completion: @escaping (Result<Void, Error>) -> Void)
  func doAskNotificationPerms(completion: @escaping (Result<Void, Error>) -> Void)
  func doAskVpnPerms(completion: @escaping (Result<Void, Error>) -> Void)
  func doAuthenticate(completion: @escaping (Result<Bool, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class PermOpsSetup {
  /// The codec used by PermOps.
  /// Sets up an instance of `PermOps` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: PermOps?) {
    let getPrivateDnsSettingChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.common.PermOps.getPrivateDnsSetting", binaryMessenger: binaryMessenger)
    if let api = api {
      getPrivateDnsSettingChannel.setMessageHandler { _, reply in
        api.getPrivateDnsSetting() { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      getPrivateDnsSettingChannel.setMessageHandler(nil)
    }
    let doSetPrivateDnsEnabledChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.common.PermOps.doSetPrivateDnsEnabled", binaryMessenger: binaryMessenger)
    if let api = api {
      doSetPrivateDnsEnabledChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let tagArg = args[0] as! String
        let aliasArg = args[1] as! String
        api.doSetPrivateDnsEnabled(tag: tagArg, alias: aliasArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      doSetPrivateDnsEnabledChannel.setMessageHandler(nil)
    }
    let doSetDnsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.common.PermOps.doSetDns", binaryMessenger: binaryMessenger)
    if let api = api {
      doSetDnsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let tagArg = args[0] as! String
        api.doSetDns(tag: tagArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      doSetDnsChannel.setMessageHandler(nil)
    }
    let doNotificationEnabledChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.common.PermOps.doNotificationEnabled", binaryMessenger: binaryMessenger)
    if let api = api {
      doNotificationEnabledChannel.setMessageHandler { _, reply in
        api.doNotificationEnabled() { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      doNotificationEnabledChannel.setMessageHandler(nil)
    }
    let doVpnEnabledChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.common.PermOps.doVpnEnabled", binaryMessenger: binaryMessenger)
    if let api = api {
      doVpnEnabledChannel.setMessageHandler { _, reply in
        api.doVpnEnabled() { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      doVpnEnabledChannel.setMessageHandler(nil)
    }
    let doOpenSettingsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.common.PermOps.doOpenSettings", binaryMessenger: binaryMessenger)
    if let api = api {
      doOpenSettingsChannel.setMessageHandler { _, reply in
        api.doOpenSettings() { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      doOpenSettingsChannel.setMessageHandler(nil)
    }
    let doAskNotificationPermsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.common.PermOps.doAskNotificationPerms", binaryMessenger: binaryMessenger)
    if let api = api {
      doAskNotificationPermsChannel.setMessageHandler { _, reply in
        api.doAskNotificationPerms() { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      doAskNotificationPermsChannel.setMessageHandler(nil)
    }
    let doAskVpnPermsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.common.PermOps.doAskVpnPerms", binaryMessenger: binaryMessenger)
    if let api = api {
      doAskVpnPermsChannel.setMessageHandler { _, reply in
        api.doAskVpnPerms() { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      doAskVpnPermsChannel.setMessageHandler(nil)
    }
    let doAuthenticateChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.common.PermOps.doAuthenticate", binaryMessenger: binaryMessenger)
    if let api = api {
      doAuthenticateChannel.setMessageHandler { _, reply in
        api.doAuthenticate() { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      doAuthenticateChannel.setMessageHandler(nil)
    }
  }
}
