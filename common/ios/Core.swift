// Autogenerated from Pigeon (v12.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Used by Pigeon to generate the bindings to the platform code.
///
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol CoreOps {
  func doSave(key: String, value: String, isSecure: Bool, isBackup: Bool, completion: @escaping (Result<Void, Error>) -> Void)
  func doLoad(key: String, isSecure: Bool, isBackup: Bool, completion: @escaping (Result<String, Error>) -> Void)
  func doDelete(key: String, isSecure: Bool, isBackup: Bool, completion: @escaping (Result<Void, Error>) -> Void)
  func doUseFilename(filename: String, completion: @escaping (Result<Void, Error>) -> Void)
  func doSaveBatch(batch: String, completion: @escaping (Result<Void, Error>) -> Void)
  func doShareFile(completion: @escaping (Result<Void, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class CoreOpsSetup {
  /// The codec used by CoreOps.
  /// Sets up an instance of `CoreOps` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: CoreOps?) {
    let doSaveChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.common.CoreOps.doSave", binaryMessenger: binaryMessenger)
    if let api = api {
      doSaveChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let keyArg = args[0] as! String
        let valueArg = args[1] as! String
        let isSecureArg = args[2] as! Bool
        let isBackupArg = args[3] as! Bool
        api.doSave(key: keyArg, value: valueArg, isSecure: isSecureArg, isBackup: isBackupArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      doSaveChannel.setMessageHandler(nil)
    }
    let doLoadChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.common.CoreOps.doLoad", binaryMessenger: binaryMessenger)
    if let api = api {
      doLoadChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let keyArg = args[0] as! String
        let isSecureArg = args[1] as! Bool
        let isBackupArg = args[2] as! Bool
        api.doLoad(key: keyArg, isSecure: isSecureArg, isBackup: isBackupArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      doLoadChannel.setMessageHandler(nil)
    }
    let doDeleteChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.common.CoreOps.doDelete", binaryMessenger: binaryMessenger)
    if let api = api {
      doDeleteChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let keyArg = args[0] as! String
        let isSecureArg = args[1] as! Bool
        let isBackupArg = args[2] as! Bool
        api.doDelete(key: keyArg, isSecure: isSecureArg, isBackup: isBackupArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      doDeleteChannel.setMessageHandler(nil)
    }
    let doUseFilenameChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.common.CoreOps.doUseFilename", binaryMessenger: binaryMessenger)
    if let api = api {
      doUseFilenameChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let filenameArg = args[0] as! String
        api.doUseFilename(filename: filenameArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      doUseFilenameChannel.setMessageHandler(nil)
    }
    let doSaveBatchChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.common.CoreOps.doSaveBatch", binaryMessenger: binaryMessenger)
    if let api = api {
      doSaveBatchChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let batchArg = args[0] as! String
        api.doSaveBatch(batch: batchArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      doSaveBatchChannel.setMessageHandler(nil)
    }
    let doShareFileChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.common.CoreOps.doShareFile", binaryMessenger: binaryMessenger)
    if let api = api {
      doShareFileChannel.setMessageHandler { _, reply in
        api.doShareFile() { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      doShareFileChannel.setMessageHandler(nil)
    }
  }
}
