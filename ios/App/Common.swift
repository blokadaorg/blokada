// Autogenerated from Pigeon (v12.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Generated class from Pigeon that represents data sent in messages.
struct OpsEnvInfo {
  var appVersion: String
  var osName: String
  var osVersion: String
  var buildFlavor: String
  var buildType: String
  var cpu: String
  var deviceBrand: String
  var deviceModel: String
  var deviceName: String

  static func fromList(_ list: [Any?]) -> OpsEnvInfo? {
    let appVersion = list[0] as! String
    let osName = list[1] as! String
    let osVersion = list[2] as! String
    let buildFlavor = list[3] as! String
    let buildType = list[4] as! String
    let cpu = list[5] as! String
    let deviceBrand = list[6] as! String
    let deviceModel = list[7] as! String
    let deviceName = list[8] as! String

    return OpsEnvInfo(
      appVersion: appVersion,
      osName: osName,
      osVersion: osVersion,
      buildFlavor: buildFlavor,
      buildType: buildType,
      cpu: cpu,
      deviceBrand: deviceBrand,
      deviceModel: deviceModel,
      deviceName: deviceName
    )
  }
  func toList() -> [Any?] {
    return [
      appVersion,
      osName,
      osVersion,
      buildFlavor,
      buildType,
      cpu,
      deviceBrand,
      deviceModel,
      deviceName,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct OpsLink {
  var id: String
  var url: String

  static func fromList(_ list: [Any?]) -> OpsLink? {
    let id = list[0] as! String
    let url = list[1] as! String

    return OpsLink(
      id: id,
      url: url
    )
  }
  func toList() -> [Any?] {
    return [
      id,
      url,
    ]
  }
}

private class CommonOpsCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return OpsEnvInfo.fromList(self.readValue() as! [Any?])
      case 129:
        return OpsLink.fromList(self.readValue() as! [Any?])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class CommonOpsCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? OpsEnvInfo {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? OpsLink {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class CommonOpsCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return CommonOpsCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return CommonOpsCodecWriter(data: data)
  }
}

class CommonOpsCodec: FlutterStandardMessageCodec {
  static let shared = CommonOpsCodec(readerWriter: CommonOpsCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol CommonOps {
  func doGet(url: String, completion: @escaping (Result<String, Error>) -> Void)
  func doRequest(url: String, payload: String?, type: String, completion: @escaping (Result<String, Error>) -> Void)
  func doRequestWithHeaders(url: String, payload: String?, type: String, headers: [String?: String?], completion: @escaping (Result<String, Error>) -> Void)
  func doGetEnvInfo(completion: @escaping (Result<OpsEnvInfo, Error>) -> Void)
  func doShowRateDialog(completion: @escaping (Result<Void, Error>) -> Void)
  func doLinksChanged(links: [OpsLink], completion: @escaping (Result<Void, Error>) -> Void)
  func doShow(notificationId: String, atWhen: String, body: String?, completion: @escaping (Result<Void, Error>) -> Void)
  func doDismissAll(completion: @escaping (Result<Void, Error>) -> Void)
  func doConfigChanged(skipBypassList: Bool, completion: @escaping (Result<Void, Error>) -> Void)
  func doShareText(text: String, completion: @escaping (Result<Void, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class CommonOpsSetup {
  /// The codec used by CommonOps.
  static var codec: FlutterStandardMessageCodec { CommonOpsCodec.shared }
  /// Sets up an instance of `CommonOps` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: CommonOps?) {
    let doGetChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.common.CommonOps.doGet", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      doGetChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let urlArg = args[0] as! String
        api.doGet(url: urlArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      doGetChannel.setMessageHandler(nil)
    }
    let doRequestChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.common.CommonOps.doRequest", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      doRequestChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let urlArg = args[0] as! String
        let payloadArg: String? = nilOrValue(args[1])
        let typeArg = args[2] as! String
        api.doRequest(url: urlArg, payload: payloadArg, type: typeArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      doRequestChannel.setMessageHandler(nil)
    }
    let doRequestWithHeadersChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.common.CommonOps.doRequestWithHeaders", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      doRequestWithHeadersChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let urlArg = args[0] as! String
        let payloadArg: String? = nilOrValue(args[1])
        let typeArg = args[2] as! String
        let headersArg = args[3] as! [String?: String?]
        api.doRequestWithHeaders(url: urlArg, payload: payloadArg, type: typeArg, headers: headersArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      doRequestWithHeadersChannel.setMessageHandler(nil)
    }
    let doGetEnvInfoChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.common.CommonOps.doGetEnvInfo", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      doGetEnvInfoChannel.setMessageHandler { _, reply in
        api.doGetEnvInfo() { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      doGetEnvInfoChannel.setMessageHandler(nil)
    }
    let doShowRateDialogChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.common.CommonOps.doShowRateDialog", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      doShowRateDialogChannel.setMessageHandler { _, reply in
        api.doShowRateDialog() { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      doShowRateDialogChannel.setMessageHandler(nil)
    }
    let doLinksChangedChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.common.CommonOps.doLinksChanged", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      doLinksChangedChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let linksArg = args[0] as! [OpsLink]
        api.doLinksChanged(links: linksArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      doLinksChangedChannel.setMessageHandler(nil)
    }
    let doShowChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.common.CommonOps.doShow", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      doShowChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let notificationIdArg = args[0] as! String
        let atWhenArg = args[1] as! String
        let bodyArg: String? = nilOrValue(args[2])
        api.doShow(notificationId: notificationIdArg, atWhen: atWhenArg, body: bodyArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      doShowChannel.setMessageHandler(nil)
    }
    let doDismissAllChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.common.CommonOps.doDismissAll", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      doDismissAllChannel.setMessageHandler { _, reply in
        api.doDismissAll() { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      doDismissAllChannel.setMessageHandler(nil)
    }
    let doConfigChangedChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.common.CommonOps.doConfigChanged", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      doConfigChangedChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let skipBypassListArg = args[0] as! Bool
        api.doConfigChanged(skipBypassList: skipBypassListArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      doConfigChangedChannel.setMessageHandler(nil)
    }
    let doShareTextChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.common.CommonOps.doShareText", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      doShareTextChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let textArg = args[0] as! String
        api.doShareText(text: textArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      doShareTextChannel.setMessageHandler(nil)
    }
  }
}
