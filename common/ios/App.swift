// Autogenerated from Pigeon (v12.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

enum AppStatus: Int {
  case unknown = 0
  case initializing = 1
  case initFail = 2
  case reconfiguring = 3
  case deactivated = 4
  case paused = 5
  case activatedCloud = 6
  case activatedPlus = 7
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol AppOps {
  func doAppStatusChanged(status: AppStatus, completion: @escaping (Result<Void, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class AppOpsSetup {
  /// The codec used by AppOps.
  /// Sets up an instance of `AppOps` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: AppOps?) {
    let doAppStatusChangedChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.common.AppOps.doAppStatusChanged", binaryMessenger: binaryMessenger)
    if let api = api {
      doAppStatusChangedChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let statusArg = AppStatus(rawValue: args[0] as! Int)!
        api.doAppStatusChanged(status: statusArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      doAppStatusChangedChannel.setMessageHandler(nil)
    }
  }
}
