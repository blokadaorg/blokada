// Autogenerated from Pigeon (v12.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

enum CommandName: Int {
  case url = 0
  case restore = 1
  case account = 2
  case receipt = 3
  case fetchProducts = 4
  case purchase = 5
  case changeProduct = 6
  case restorePayment = 7
  case pause = 8
  case unpause = 9
  case remoteNotification = 10
  case foreground = 11
  case background = 12
  case route = 13
  case modalShow = 14
  case modalShown = 15
  case modalDismiss = 16
  case modalDismissed = 17
  case back = 18
  case fatal = 19
  case warning = 20
  case log = 21
  case crashLog = 22
  case familyLink = 23
  case supportNotify = 24
  case supportAskNotificationPerms = 25
  case schedulerPing = 26
  case newPlus = 27
  case vpnStatus = 28
  case notificationTapped = 29
  case appleNotificationToken = 30
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol CommandOps {
  func doCanAcceptCommands(completion: @escaping (Result<Void, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class CommandOpsSetup {
  /// The codec used by CommandOps.
  /// Sets up an instance of `CommandOps` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: CommandOps?) {
    let doCanAcceptCommandsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.common.CommandOps.doCanAcceptCommands", binaryMessenger: binaryMessenger)
    if let api = api {
      doCanAcceptCommandsChannel.setMessageHandler { _, reply in
        api.doCanAcceptCommands() { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      doCanAcceptCommandsChannel.setMessageHandler(nil)
    }
  }
}
/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol CommandEventsProtocol {
  func onCommand(command commandArg: String, m mArg: Int64, completion: @escaping (Result<Void, FlutterError>) -> Void) 
  func onCommandWithParam(command commandArg: String, p1 p1Arg: String, m mArg: Int64, completion: @escaping (Result<Void, FlutterError>) -> Void) 
  func onCommandWithParams(command commandArg: String, p1 p1Arg: String, p2 p2Arg: String, m mArg: Int64, completion: @escaping (Result<Void, FlutterError>) -> Void) 
}
class CommandEvents: CommandEventsProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  init(binaryMessenger: FlutterBinaryMessenger){
    self.binaryMessenger = binaryMessenger
  }
  func onCommand(command commandArg: String, m mArg: Int64, completion: @escaping (Result<Void, FlutterError>) -> Void)  {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.common.CommandEvents.onCommand", binaryMessenger: binaryMessenger)
    channel.sendMessage([commandArg, mArg] as [Any?]) { _ in
      completion(.success(Void()))
    }
  }
  func onCommandWithParam(command commandArg: String, p1 p1Arg: String, m mArg: Int64, completion: @escaping (Result<Void, FlutterError>) -> Void)  {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.common.CommandEvents.onCommandWithParam", binaryMessenger: binaryMessenger)
    channel.sendMessage([commandArg, p1Arg, mArg] as [Any?]) { _ in
      completion(.success(Void()))
    }
  }
  func onCommandWithParams(command commandArg: String, p1 p1Arg: String, p2 p2Arg: String, m mArg: Int64, completion: @escaping (Result<Void, FlutterError>) -> Void)  {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.common.CommandEvents.onCommandWithParams", binaryMessenger: binaryMessenger)
    channel.sendMessage([commandArg, p1Arg, p2Arg, mArg] as [Any?]) { _ in
      completion(.success(Void()))
    }
  }
}
